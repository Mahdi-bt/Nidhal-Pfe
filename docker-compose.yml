version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: training-center-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: training_center
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - training-center-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (Express)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: training-center-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 5000
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: training_center
      JWT_SECRET: your_jwt_secret_key_change_this_in_production
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - training-center-network
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "
      echo 'Waiting for postgres...' &&
      while ! nc -z postgres 5432; do
        sleep 1
      done &&
      echo 'PostgreSQL started' &&
      sleep 5 &&
      npm run migrate &&
      npm start
      "

networks:
  training-center-network:
    driver: bridge

volumes:
  postgres_data:
